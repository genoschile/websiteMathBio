---
const navItems = [
    {
        title: "Experiencia",
        label: "experiencia",
        url: "/#experiencia",
    },
    {
        title: "Proyectos",
        label: "proyectos",
        url: "/#proyectos",
    },
    {
        title: "Sobre m√≠",
        label: "sobre-mi",
        url: "/#sobre-mi",
    },
    {
        title: "Contacto",
        label: "contacto",
        url: "mailto:miduga@gmail.com",
    },
];
---

<header>
    <nav>
        {
            navItems.map((link) => (
                <a aria-label={link.label} href={link.url}>
                    {link.title}
                </a>
            ))
        }
    </nav>
</header>

<style>
    header {
        position: fixed;
        top: 0px;
        z-index: 10;
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        margin-inline: auto;
        margin-top: 1.25rem;

        & nav {
            display: flex;
            padding-inline: 1.25rem;
            font-size: small;
            font-weight: 500;
            border-radius: 100%;
            text-color: gray;
            justify-content: center;
            align-items: center;

            & a {
                position: relative;
                display: block;
                padding-inline: 1.25rem;
                padding-block: 1.25rem;
                transition: all ease;
                
                &:hover {
                    text-color: blue;
                }
            }
        }
    }

    .mark {
        color: red;
    }
</style>

<script>
    document.addEventListener("astro:page-load", () => {
        const sections = document.querySelectorAll("section");
        const navItems = document.querySelectorAll("header nav a");

        const callback = (entries: any[]) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    navItems.forEach((item) => {
                        if (
                            item.getAttribute("aria-label") == entry.target.id
                        ) {
                            item.classList.add("mark");
                        } else {
                            item.classList.remove("mark");
                        }
                    });
                }
            });
        };

        const observer = new IntersectionObserver(callback, {
            root: null,
            rootMargin: "0px",
            threshold: 0.3,
        });

        sections.forEach((section) => {
            observer.observe(section);
        });

        // Cleanup function
        document.onvisibilitychange = () => {
            if (document.visibilityState === "hidden") {
                observer.disconnect();
            } else {
                sections.forEach((section) => {
                    observer.observe(section);
                });
            }
        };
    });
</script>

<style>
    nav {
        animation: nav-shadown 1s linear both;
        animation-timeline: scroll();
        animation-range: 0 100px;
    }

    nav {
        @apply dark:bg-gray-800/90 bg-white/50;
    }

    @keyframes nav-shadown {
        0% {
            @apply dark:bg-gray-800/0 bg-white/0;
        }
        to {
            @apply shadow-lg ring-1 backdrop-blur ring-white/10;
        }
    }
</style>
