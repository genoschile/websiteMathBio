---
import Searcheyes from "@/icons/searcheyes.astro";
import Card from "@components/ui/card/card.astro";
import CardContent from "@components/ui/card/cardContent.astro";
import CardHeader from "@components/ui/card/cardHeader.astro";
import CardTitle from "@components/ui/card/cardTitle.astro";
import Input from "@components/ui/input.astro";
import Select from "@components/ui/select/select.astro";
import SelectContent from "@components/ui/select/selectContent.astro";
import SelectItem from "@components/ui/select/selectItem.astro";
import SelectTrigger from "@components/ui/select/selectTrigger.astro";
import SelectValue from "@components/ui/select/selectValue.astro";
import Github from "@icons/github.astro";

const url = new URL(Astro.request.url);
const currentSearchTerm = url.searchParams.get("q") || "";
const currentYearFilter = url.searchParams.get("year") || "all";
const currentSortBy = url.searchParams.get("sort") || "year_desc";

const availableYears = ["all", "2024", "2023", "2022", "2021", "2020"];
---

<Card class="mb-8 shadow-lg">
  <CardHeader>
    <CardTitle class="flex items-center gap-2">
      <Searcheyes />
      Filter & Sort Options
    </CardTitle>
  </CardHeader>
  <CardContent className="grid grid-cols-1 md:grid-cols-3 gap-4">
    <form class="contents form-publications">
      <div class="space-y-1">
        <label for="search-publications" class="text-md font-medium flex"
          >Search
        </label>
        <div class="relative">
          <Input
            id="search-publications"
            name="search-publications"
            type="search"
            aria-label="Search publications"
            placeholder="Search title, authors, keywords..."
            className="pl-8"
          />
        </div>
      </div>

      <!-- <div class="space-y-1">
        <label for="year-filter" class="text-md font-medium"
          >Filter by Year</label
        >
        <Select value={currentYearFilter} name="year">
          <SelectTrigger id="year-filter">
            <SelectValue placeholder="Select year" />
          </SelectTrigger>
          <SelectContent>
            {
              availableYears.map((year) => (
                <SelectItem key={year} value={year}>
                  {year === "all" ? "All Years" : year}
                </SelectItem>
              ))
            }
          </SelectContent>
        </Select>
      </div>

      <div class="space-y-1">
        <label for="sort-by" class="text-md font-medium">Sort by</label>
        <Select value={currentSortBy} name="sort">
          <SelectTrigger id="sort-by">
            <Github class="mr-2 h-4 w-4 text-muted-foreground" />
            <SelectValue placeholder="Sort by" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="year_desc">Year (Newest First)</SelectItem>
            <SelectItem value="year_asc">Year (Oldest First)</SelectItem>
            <SelectItem value="title_asc">Title (A-Z)</SelectItem>
            <SelectItem value="title_desc">Title (Z-A)</SelectItem>
          </SelectContent>
        </Select>
      </div> -->

      <div class="md:col-span-3 flex justify-end mt-4">
        <button
          type="submit"
          class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors"
        >
          Apply Filters
        </button>
      </div>
    </form>
  </CardContent>
</Card>

<script>
  import DOMPurify from "dompurify";

  const $inputSearch = document.querySelector(
    "#search-publications"
  ) as HTMLInputElement;

  const $formPublications = document.querySelector(
    ".form-publications"
  ) as HTMLFormElement;

  const updateTitleDocument = (search: string) => {
    document.title = `Publications - ${search}`;
  }


  $formPublications?.addEventListener("submit", (event) => {
    event.preventDefault();

    const formData = new FormData($formPublications);
    
    // const searchTerm = formData.get("search-publications")?.toString();

    const searchTerm = DOMPurify.sanitize(
      formData.get("search-publications")?.toString() || ""
    );

    if (!searchTerm || searchTerm.trim() === "" || searchTerm.length === 0)
      return;

    const url = new URL("/publications", window.location.origin);
    url.searchParams.set("q", searchTerm);

    window.location.assign(url.toString());

    // Update the document title
    updateTitleDocument(searchTerm);

    // const params = new URLSearchParams(formData).toString();
    // const baseUrl = window.location.pathname;
    // window.location.href = `${baseUrl}?${params}`;
  });

  $inputSearch?.addEventListener("input", (event) => {
    const searchTerm = DOMPurify.sanitize(
      ($inputSearch as HTMLInputElement).value
    );

    
  });
</script>
