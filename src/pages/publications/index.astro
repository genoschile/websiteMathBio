---
import PageHeader from "../../components/layout/pageHeader.astro";
import Button from "../../components/ui/button.astro";
import Card from "../../components/ui/card/card.astro";
import CardContent from "../../components/ui/card/cardContent.astro";
import CardDescription from "../../components/ui/card/cardDescription.astro";
import CardFooter from "../../components/ui/card/cardFooter.astro";
import CardHeader from "../../components/ui/card/cardHeader.astro";
import CardTitle from "../../components/ui/card/cardTitle.astro";
import Input from "../../components/ui/input.astro";
import Select from "../../components/ui/select/select.astro";
import SelectContent from "../../components/ui/select/selectContent.astro";
import SelectItem from "../../components/ui/select/selectItem.astro";
import SelectTrigger from "../../components/ui/select/selectTrigger.astro";
import SelectValue from "../../components/ui/select/selectValue.astro";
import SlotButton from "../../components/ui/slotButton.astro";
import Github from "../../icons/github.astro";
import Layout from "../../layouts/Layout.astro";

// Simula tus datos y estados como constantes estáticas para que renderice sin lógica React:
const mockPublications = [
  {
    id: '1',
    title: 'Quantum Computing Breakthrough',
    authors: ['Alice Smith', 'Bob Johnson'],
    year: 2024,
    journal: 'Science Advances',
    abstract:
      'This paper explores new algorithms in quantum computing that reduce computational complexity.',
    keywords: ['quantum', 'algorithms'],
    link: 'https://example.com/pub1',
  },
  {
    id: '2',
    title: 'Renewable Energy Innovations',
    authors: ['Carol Lee', 'David Kim'],
    year: 2023,
    journal: 'Renewable Energy Journal',
    abstract:
      'Introducing new battery technology for improved energy storage efficiency.',
    keywords: ['energy', 'battery', 'storage'],
    link: 'https://example.com/pub2',
  },
];

// Variables "fijas" para filtros (sin funcionalidad)
const searchTerm = '';
const yearFilter = 'all';
const sortBy = 'year_desc';

// Simula lista filtrada y ordenada igual que el mock
const filteredAndSortedPublications = mockPublications;
const availableYears = ['all', '2024', '2023'];
---

<Layout title="Publications" >
    <div>
  <PageHeader
    title="Publications"
    description="Browse our lab's research papers and articles."
    icon={Github}
  />

  <Card class="mb-8 shadow-lg">
    <CardHeader>
      <CardTitle class="flex items-center gap-2">
        <Github size={20} />
        Filter & Sort Options
      </CardTitle>
    </CardHeader>
    <CardContent class="grid grid-cols-1 md:grid-cols-3 gap-4">
      <div class="space-y-1">
        <label for="search-publications" class="text-sm font-medium">Search</label>
        <div class="relative">
          <Github class="absolute left-2.5 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
          <Input
            id="search-publications"
            type="text"
            placeholder="Search title, authors, keywords..."
            value={searchTerm}
            readonly
            class="pl-8"
          />
        </div>
      </div>
      <div class="space-y-1">
        <label for="year-filter" class="text-sm font-medium">Filter by Year</label>
        <Select value={yearFilter} disabled>
          <SelectTrigger id="year-filter">
            <SelectValue placeholder="Select year" />
          </SelectTrigger>
          <SelectContent>
            {availableYears.map((year) => (
              <SelectItem key={year} value={year}>
                {year === 'all' ? 'All Years' : year}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>
      <div class="space-y-1">
        <label for="sort-by" class="text-sm font-medium">Sort by</label>
        <Select value={sortBy} disabled>
          <SelectTrigger id="sort-by">
            <Github class="mr-2 h-4 w-4 text-muted-foreground" />
            <SelectValue placeholder="Sort by" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="year_desc">Year (Newest First)</SelectItem>
            <SelectItem value="year_asc">Year (Oldest First)</SelectItem>
            <SelectItem value="title_asc">Title (A-Z)</SelectItem>
            <SelectItem value="title_desc">Title (Z-A)</SelectItem>
          </SelectContent>
        </Select>
      </div>
    </CardContent>
  </Card>

  {filteredAndSortedPublications.length > 0 ? (
    <div class="space-y-6">
      {filteredAndSortedPublications.map((pub) => (
        <Card
          key={pub.id}
          class="shadow-md hover:shadow-lg transition-shadow duration-300"
        >
          <CardHeader>
            <CardTitle>{pub.title}</CardTitle>
            <CardDescription>{pub.authors.join(', ')}</CardDescription>
          </CardHeader>
          <CardContent>
            <p class="text-sm text-muted-foreground italic">
              {pub.journal} ({pub.year})
            </p>
            {pub.abstract && (
              <p class="mt-2 text-sm text-foreground line-clamp-3">{pub.abstract}</p>
            )}
            {pub.keywords && pub.keywords.length > 0 && (
              <p class="mt-2 text-xs text-muted-foreground">
                <strong>Keywords:</strong> {pub.keywords.join(', ')}
              </p>
            )}
          </CardContent>
          {pub.link && (
            <CardFooter>
              <SlotButton variant="link" asChild class="p-0 text-primary">
                <a href={pub.link} target="_blank" rel="noopener noreferrer">
                  View Publication
                </a>
              </SlotButton>
            </CardFooter>
          )}
        </Card>
      ))}
    </div>
  ) : (
    <div class="text-center py-12">
      <p class="text-xl text-muted-foreground">
        No publications match your criteria.
      </p>
    </div>
  )}
</div>

</Layout>